{1,
{3,
{"my-text-patterns-1C",1,0,"",""},
{5,
{"Управляющие",1,0,"",""},
{3,
{"Функции",1,0,"",""},
{0,
{"Функция (обычная)",0,0,"ф","Функция <?>() <?""Вид"", ВыборВарианта, ""Обычная"", """", ""Экспортная"", ""Экспорт"">

КонецФункции
"}
},
{0,
{"Функция модуля формы",0,0,"ф","&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаСервереБезКонтекста"", ""НаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"">
Функция <?>() <?""Вид"", ВыборВарианта, ""Обычная"", """", ""Экспортная"", ""Экспорт"">

КонецФункции
"}
},
{0,
{"Функция модуля команды",0,0,"ф","&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервере"">
Функция <?>() <?""Вид"", ВыборВарианта, ""Обычная"", """", ""Экспортная"", ""Экспорт"">

КонецФункции"}
}
},
{3,
{"Процедуры",1,0,"",""},
{0,
{"Процедура (обычная)",0,0,"п","Процедура <?>() <?""Вид"", ВыборВарианта, ""Обычная"", """", ""Экспортная"", ""Экспорт"">

КонецПроцедуры
"}
},
{0,
{"Процедура модуля формы",0,0,"п","&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаСервереБезКонтекста"", ""НаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"">
Процедура <?>() <?""Вид"", ВыборВарианта, ""Обычная"", """", ""Экспортная"", ""Экспорт"">

КонецПроцедуры"}
},
{0,
{"Процедура модуля команды",0,0,"п","&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервере"">
Процедура <?>() <?""Вид"", ВыборВарианта, ""Обычная"", """", ""Экспортная"", ""Экспорт"">

КонецПроцедуры"}
}
},
{3,
{"Условия",1,0,"",""},
{0,
{"Если",0,0,"у","Если <?> Тогда
	
КонецЕсли;
"}
},
{0,
{"ЕслиИначеЕсли",0,0,"у","Если <?> Тогда
	
ИначеЕсли  Тогда
	
КонецЕсли;
"}
},
{0,
{"ЕслиИначе",0,0,"у","Если <?> Тогда
	
Иначе
	
КонецЕсли;
"}
}
},
{5,
{"Циклы",1,0,"",""},
{0,
{"Пока",0,0,"ц","Пока <?> Цикл
	
КонецЦикла;"}
},
{0,
{"Для каждого",0,0,"ц","Для Каждого <?> Из  Цикл
	
КонецЦикла;"}
},
{0,
{"Для счетчик",0,0,"ц","Для <?> По  Цикл

КонецЦикла;"}
},
{0,
{"Прервать",0,0,"ц","Прервать;"}
},
{0,
{"Продолжить",0,0,"ц","Продолжить;"}
}
},
{5,
{"Прочее",1,0,"",""},
{0,
{"Результат",0,0,"*","Результат = <?""Выберите стартовое значение"", ВыборВарианта, ""Неопределено"", ""Неопределено"", ""Истина"", ""Истина"", ""Ложь"", ""Ложь"", ""Строка"", """""""", ""Число"", ""0"", ""Структура"", ""Новый Структура"", ""Массив"", ""Новый Массив"">;

<?>

Возврат Результат;"}
},
{0,
{"Возврат",0,0,"*","Возврат<?>;"}
},
{0,
{"На сервере",0,0,"*","<?""Основной реквизит"">НаСервере = РеквизитФормыВЗначение(""<?""Основной реквизит"">"");

<?>

ЗначениеВРеквизитФормы(<?""Основной реквизит"">НаСервере, ""<?""Основной реквизит"">"");
"}
},
{0,
{"Значение заполнено",0,0,"*","<?""Инвертировать"", ВыборВарианта, ""Да"", ""Не "", ""Нет"", """">ЗначениеЗаполнено(<?>)"}
},
{0,
{"Сообщение",0,0,"*","Сообщение = Новый СообщениеПользователю;
Сообщение.Текст = ""<?>"";
Сообщение.Сообщить();	
"}
}
}
},
{6,
{"Утверждения",1,0,"",""},
{0,
{"Проверить истину",0,0,"утв","Ванесса.ПроверитьИстину(<?>);"}
},
{0,
{"Проверить ложь",0,0,"утв","Ванесса.ПроверитьЛожь(<?>);"}
},
{0,
{"Посмотреть значение",0,0,"утв","Ванесса.ПосмотретьЗначение(<?"""">,Истина);
"}
},
{0,
{"Проверить равенство",0,0,"утв","Ванесса.ПроверитьРавенство(<?>,, """");"}
},
{0,
{"Проверить больше",0,0,"утв","Ванесса.ПроверитьБольше(<?>,, """");"}
},
{0,
{"Проверить не равенство",0,0,"утв","Ванесса.ПроверитьНеРавенство(<?>,, """");"}
}
},
{1,
{"Алгоритмы",1,0,"",""},
{10,
{"Работа с ",1,0,"",""},
{1,
{"Запросами",1,0,"",""},
{0,
{"ПолучитьМассивСтруктурИзРезультатаЗапроса",0,0,"","
&НаСервереБезКонтекста
Функция ПолучитьМассивСтруктурИзРезультатаЗапроса(РезультатЗапроса)
	Результат = Новый Массив;
	
	Колонки = РезультатЗапроса.Колонки;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВременнаяСтруктура = Новый Структура;
		Для Каждого Колонка Из Колонки Цикл
			ВременнаяСтруктура.Вставить(Колонка.Имя,  ВыборкаДетальныеЗаписи[Колонка.Имя]);
		КонецЦикла;
		
		Результат.Добавить(ВременнаяСтруктура);		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
"}
}
},
{3,
{"Формами",1,0,"",""},
{2,
{"Подбор",1,0,"",""},
{0,
{"Код на стороне кнопки ""Подбор""",0,0,"","
&НаКлиенте
Процедура Подбор(Команда)
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить(""ВыбранныеИнфобазы"", ПолучитьВыбранныеИнфобазы());
	
	ОткрытьФорму(""Обработка.РаботаСВнешнимиИсточниками.Форма.ФормаПодбораИнфобаз"", ПараметрыПодбора, ЭтаФорма); 
КонецПроцедуры

&НаСервере
Функция ПолучитьВыбранныеИнфобазы()
	Возврат Объект.Инфобазы.Выгрузить(, ""Инфобаза"").ВыгрузитьКолонку(""Инфобаза"");
КонецФункции

&НаКлиенте
Процедура ОбработатьПодбор(АдресВыбранныхИнфобаз) Экспорт
	ОбработатьПодборНаСервере(АдресВыбранныхИнфобаз);
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодборНаСервере(АдресВыбранныхИнфобаз)
	Объект.Инфобазы.Загрузить(ПолучитьИзВременногоХранилища(АдресВыбранныхИнфобаз));
КонецПроцедуры
"}
},
{0,
{"Код на стороне кнопки ""Завершить подбор""",0,0,"","
&НаКлиенте
Процедура ИнфобазыВыбор(Элемент, ВыбраннаяИнфобаза, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДобавитьВыбраннуюИнфобазу(ВыбраннаяИнфобаза);
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбраннуюИнфобазу(ВыбраннаяИнфобаза)
	ВыбранныеИнфобазыНаСервере = РеквизитФормыВЗначение(""ВыбранныеИнфобазы"");
	
	ИскомаяИнфобаза = ВыбранныеИнфобазыНаСервере.Найти(ВыбраннаяИнфобаза, ""Инфобаза"");
	Если ИскомаяИнфобаза = Неопределено Тогда
		НоваяСтрока = ВыбранныеИнфобазыНаСервере.Добавить();
		
		НоваяСтрока.Инфобаза = ВыбраннаяИнфобаза;
	КонецЕсли;

	ЗначениеВРеквизитФормы(ВыбранныеИнфобазыНаСервере, ""ВыбранныеИнфобазы"");
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ВыбранныеИнфобазыНаСервере = РеквизитФормыВЗначение(""ВыбранныеИнфобазы"");
	
	Для Каждого ВыбраннаяИнфобаза Из Параметры.ВыбранныеИнфобазы Цикл
		НоваяСтрока = ВыбранныеИнфобазыНаСервере.Добавить();
		
		НоваяСтрока.Инфобаза =  ВыбраннаяИнфобаза;
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ВыбранныеИнфобазыНаСервере, ""ВыбранныеИнфобазы"");
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеИнфобазыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ВыбранныеИнфобазыПеретаскиваниеНаСервере(ПараметрыПеретаскивания.Значение);
КонецПроцедуры

&НаСервере
Процедура ВыбранныеИнфобазыПеретаскиваниеНаСервере(ПеретаскиваемыеИнфобазы)
	ВыбранныеИнфобазыНаСервере = РеквизитФормыВЗначение(""ВыбранныеИнфобазы"");
	
	Для Каждого ВыбраннаяИнфобаза Из ПеретаскиваемыеИнфобазы Цикл
		ИскомаяИнфобаза = ВыбранныеИнфобазыНаСервере.Найти(ВыбраннаяИнфобаза, ""Инфобаза"");
		Если ИскомаяИнфобаза = Неопределено Тогда
			НоваяСтрока = ВыбранныеИнфобазыНаСервере.Добавить();
			
			НоваяСтрока.Инфобаза = ВыбраннаяИнфобаза;
		КонецЕсли;
	КонецЦикла;

	ЗначениеВРеквизитФормы(ВыбранныеИнфобазыНаСервере, ""ВыбранныеИнфобазы"");
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодбор(Команда)
	АдресВыбранныхИнфобаз = ПоместитьВыбранныеИнфобазыВоВременноеХранилище();

	ВладелецФормы.ОбработатьПодбор(АдресВыбранныхИнфобаз);
	
	Закрыть();
КонецПроцедуры

&НаСервере
Функция ПоместитьВыбранныеИнфобазыВоВременноеХранилище()
	Возврат ПоместитьВоВременноеХранилище(ВыбранныеИнфобазы.Выгрузить());
КонецФункции"}
}
},
{0,
{"Определить тип составного реквизита",0,0,"","
&НаКлиенте
Процедура ОпределитьТипСоставногоРеквизита(ИмяРеквизита)
	Элементы[ИмяРеквизита].ОграничениеТипа = Новый ОписаниеТипов(""Неопределено"");
	Если Запись.ВариантСопровождения = Перечисления.КИС_ВариантСопровожденияБухгалтерскогоУчета.ОЦО Тогда
		Элементы[ИмяРеквизита].ОграничениеТипа = Новый ОписаниеТипов(""СправочникСсылка.Контрагенты"");
	КонецЕсли;
КонецПроцедуры
"}
},
{0,
{"Переоткрытие управляемой формы (асинхронный режим)",0,0,"","
&НаКлиенте
Процедура Переоткрыть(Команда)
	ФайлВнешнейОбработки = ПолучитьФайлВнешнейОбработки();
	
	НачатьПомещениеФайла(,, ФайлВнешнейОбработки, Ложь); 

	ОткрытьФорму(ЭтаФорма.ИмяФормы,,, Истина);
	
	Закрыть();
КонецПроцедуры

&НаСервере
Функция ПолучитьФайлВнешнейОбработки()
	Файл = РеквизитФормыВЗначение(""Объект"").ИспользуемоеИмяФайла;
	
	ВнешняяОбработка = ВнешниеОбработки.Создать(Файл, Ложь);
	
	Возврат Файл;
КонецФункции
"}
}
},
{2,
{"Строками",1,0,"",""},
{0,
{"Получить имя переменной из строки",0,0,"","
&НаКлиенте
Функция ПолучитьИмяПеременнойИзСтроки(ИсходнаяСтрока)
	ПроверочнаяСтрока = ПолучитьПроверочнуюСтроку();
	
	ИсходнаяСтрока = СокрЛП(ИсходнаяСтрока);
	ИтоговаяСтрока = """";
	
	Пробел = "" "";
	НижнееПодчеркивание = ""_"";
	
	КрайнийСимвол = Истина;
	
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	Для Счетчик = 1 По ДлинаСтроки Цикл
		ТекущийСимвол = Сред(ИсходнаяСтрока, Счетчик, 1);
		
		Если Истина
			И ТекущийСимвол = Пробел
			И Не КрайнийСимвол = НижнееПодчеркивание
			Тогда
			
			ИтоговаяСтрока = ИтоговаяСтрока + ""_"";

		Иначе
			Если Найти(ПроверочнаяСтрока, ТекущийСимвол) > 0 Тогда
				ИтоговаяСтрока = ИтоговаяСтрока + ТекущийСимвол;

			КонецЕсли;
		КонецЕсли;
		
		КрайнийСимвол = Прав(ИтоговаяСтрока, 1);
	КонецЦикла;
	
	ПервыйСимвол = Лев(ИтоговаяСтрока, 1);
	Если Найти(""0123456789"", ПервыйСимвол) > 0 Тогда
		ИтоговаяСтрока = НижнееПодчеркивание + ИтоговаяСтрока;
	КонецЕсли;
	
	Возврат ИтоговаяСтрока;
КонецФункции

&НаСервере
Функция ПолучитьПроверочнуюСтроку()
	КириллицаЗаглавные = ""АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"";
	КириллицаСтрочные = НРег(КириллицаЗаглавные);
	
	ЛатиницаЗаглавные = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
	ЛатиницаСтрочные = НРег(ЛатиницаЗаглавные);
	
	Цифры = ""0123456789"";
	
	ПроверочнаяСтрока = 
	КириллицаЗаглавные +
	КириллицаСтрочные +
	ЛатиницаЗаглавные +
	ЛатиницаСтрочные +
	Цифры;
	
	Возврат ПроверочнаяСтрока;
КонецФункции
"}
},
{0,
{"Получить инвертированную строку",0,0,"","
&НаСервере
Процедура ПолучитьИнвертированнуюСтроку(ИсходнаяСтрока, Разделитель = ""\"")
	Каталоги = Новый ТаблицаЗначений;
	
	Каталоги.Колонки.Добавить(""Порядок"");
	Каталоги.Колонки.Добавить(""Каталог"");

	Индекс = 1;
	
	Пока Не ПустаяСтрока(ИсходнаяСтрока) Цикл
		НоваяСтрока = Каталоги.Добавить();
		
		НоваяСтрока.Порядок = Индекс;
		НоваяСтрока.Каталог = Лев(ИсходнаяСтрока, СтрНайти(ИсходнаяСтрока, Разделитель) - 1);
		
		ИсходнаяСтрока = Сред(ИсходнаяСтрока, СтрНайти(ИсходнаяСтрока, Разделитель) + 1);
		
		Индекс = Индекс + 1;
		
	КонецЦикла;

	Каталоги.Сортировать(""Порядок Убыв"");
	
	Для Каждого Строка Из Каталоги Цикл
		ИсходнаяСтрока = ИсходнаяСтрока + Строка.Каталог + Разделитель;

	КонецЦикла;
КонецПроцедуры"}
}
},
{2,
{"Значениями",1,0,"",""},
{0,
{"Получить системное строковое представление из значения",0,0,"","
&НаСервере
Функция  ПолучитьСистемноеСтроковоеПредставлениеИзЗначения(Значение)
	Возврат ЗначениеВСтрокуВнутр(Значение);
КонецФункции
"}
},
{0,
{"Получить системное строковое представление из макета",0,0,"","
&НаСервере
Функция ПолучитьСистемноеСтроковоеПредставлениеИзМакета(ИмяМакета)
	ОбъектНаСервере = РеквизитФормыВЗначение(""Объект"");
	
	Макет = ОбъектНаСервере.ПолучитьМакет(ИмяМакета);	
	
	Возврат Макет.ПолучитьТекст();
КонецФункции
"}
}
},
{1,
{"Отбором",1,0,"",""},
{0,
{"Отобрать по имени",0,0,"","
&НаКлиенте
Процедура ОтобратьПоИмени()
	ЭлементОтбора = ПолучитьЭлементОтбораПоИмени(""Имя"");
	
	ЭлементОтбора.ПравоеЗначение = Значение;
	
	Элементы.ИмяДиманическогоСписка.Обновить();
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЭлементОтбораПоИмени(Имя)
	ИскомыйЭлементОтбора = Неопределено;
	
	ИскомоеПоле = Новый ПолеКомпоновкиДанных(Имя);
	Для Каждого ЭлементОтбора Из СобытияИнфобаз.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ИскомоеПоле Тогда
			ИскомыйЭлементОтбора =  ЭлементОтбора;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ИскомыйЭлементОтбора = Неопределено Тогда
		ИскомыйЭлементОтбора = СобытияИнфобаз.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
		
		ИскомыйЭлементОтбора.ЛевоеЗначение = ИскомоеПоле;
		ИскомыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;

	Возврат ИскомыйЭлементОтбора;
КонецФункции
"}
}
},
{1,
{"Файлами",1,0,"",""},
{0,
{"Чтение списка общих инфобаз",0,0,"","
&НаКлиенте
Процедура ПрочитатьСписокОбщихИнфобаз(Команда)
	АдресФайлаВоВременномХранилище = """";

	ПолноеИмяФайла = ПолучитьПутьКСпикуОбщихИнфобаз();
	
	НачатьПомещениеФайла(Новый ОписаниеОповещения(""НачатьПомещениеФайлаЗавершение"", ЭтотОбъект), АдресФайлаВоВременномХранилище, ПолноеИмяФайла, Ложь);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПутьКСпикуОбщихИнфобаз() 
	Возврат Константы.ПутьКСпискуОбщихИнфобаз.Получить();
КонецФункции

&НаКлиенте
Процедура НачатьПомещениеФайлаЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	Если Результат Тогда
		ПрочитатьСписокОбщихИнфобазНаСервере(Адрес);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСписокОбщихИнфобазНаСервере(АдресФайлаВоВременномХранилище)
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ИмяВременногоФайла);

	ВыполнитьЧтениеСпискаОбщихИнфобаз(ИмяВременногоФайла);
	
	Файл = Новый Файл(ИмяВременногоФайла);
	
	Если Файл.Существует() Тогда
		УдалитьФайлы(ИмяВременногоФайла);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЧтениеСпискаОбщихИнфобаз(ИмяВременногоФайла) 
	ДеревоСписка = ПолучитьДеревоINIFile(ИмяВременногоФайла);
	Если ДеревоСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяСервера = ""arm153"";
	ИмяБазы = ""bp_3_0"";

	СтрокаСоединения = ""Srvr="""""" + ИмяСервера + """""";Ref=""""""  + ИмяБазы + """""";"";
	Отбор = Новый Структура(""ЗначениеПараметра"",СтрокаСоединения);
	СтрокиДерева = ДеревоСписка.Строки.НайтиСтроки(Отбор);
	Если СтрокиДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДеревоINIFile(ИмяВременногоФайла)
	мИмяФайлаСписка = Константы.ПутьКСпискуОбщихИнфобаз;
	// открываем файл в кодировке UTF8
	мФайлСписка = Новый ЧтениеТекста;
	Попытка
		мФайлСписка.Открыть(ИмяВременногоФайла, КодировкаТекста.UTF8);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	// подготовим результирующее дерево
	ДеревоСписка = Новый ДеревоЗначений;
	ДеревоСписка.Колонки.Добавить(""ИмяПараметра"");
	ДеревоСписка.Колонки.Добавить(""ЗначениеПараметра"");
	Разделитель 		= ""="";
	СтрокаДерева		= Неопределено;
	// читаем файл
	ТекущаяСтрока = мФайлСписка.ПрочитатьСтроку();
	Пока НЕ ТекущаяСтрока = Неопределено Цикл
		
		ТекущаяСтрока = СокрЛП(ТекущаяСтрока);
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока) Тогда
			ТекущаяСтрока = мФайлСписка.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;
		ПервыйСимвол = Лев(ТекущаяСтрока,1);
		// начало раздела
		Если ПервыйСимвол = ""["" Тогда
			СтрокаДерева = ДеревоСписка.Строки.Добавить();
			ИмяБазы = СтрЗаменить(ТекущаяСтрока,""["","""");
			ИмяБазы = СтрЗаменить(ИмяБазы,""]"","""");
			СтрокаДерева.ИмяПараметра = ИмяБазы;
			ТекущаяСтрока = мФайлСписка.ПрочитатьСтроку();
			Продолжить;
		Иначе
			ПозицияРазделителя 	= Найти(ТекущаяСтрока,Разделитель);
			ИмяПараметра 		= Лев(ТекущаяСтрока,ПозицияРазделителя-1);
			ЗначениеПараметра 	= Сред(ТекущаяСтрока,ПозицияРазделителя+1);
			СтрокаПараметра		= СтрокаДерева.Строки.Добавить();
			СтрокаПараметра.ИмяПараметра 		= ИмяПараметра;
			СтрокаПараметра.ЗначениеПараметра 	= ЗначениеПараметра;
			
			// пропишем отдельно в таблице строку соединения базы
			Если ИмяПараметра = ""Connect"" Тогда
				СтрокаДерева.ЗначениеПараметра = ЗначениеПараметра;
			КонецЕсли;
			ТекущаяСтрока = мФайлСписка.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДеревоСписка;
КонецФункции	
"}
}
},
{4,
{"Хранилищем общих настроек",1,0,"",""},
{0,
{"СохранитьДанныеРеквизитов",0,0,"","
&НаСервере
Процедура СохранитьДанныеРеквизитов()
	Реквизиты = Метаданные.Обработки.РаботаСВнешнимиИсточниками.Реквизиты;
	Для Каждого Реквизит Из Реквизиты Цикл
		ХранилищеОбщихНастроек.Сохранить(ЭтаФорма, Реквизит.Имя, Объект[Реквизит.Имя]); 
	КонецЦикла;
КонецПроцедуры
"}
},
{0,
{"СохранитьДанныеТабличныхЧастейНаСервере",0,0,"","
&НаСервере
Процедура СохранитьДанныеТабличныхЧастейНаСервере()
	ИменаТабличныхЧастей = Новый Массив;
	
	ИменаТабличныхЧастей.Добавить(""БазыДляОбновления"");
	ИменаТабличныхЧастей.Добавить(""СписокДопустимыхКОбнавлениюРелизов"");
	
	Для Каждого Имя Из ИменаТабличныхЧастей Цикл
		ХранилищеОбщихНастроек.Сохранить(ЭтаФорма, Имя, Объект[Имя].Выгрузить()); 
	КонецЦикла;
КонецПроцедуры
"}
},
{0,
{"ВосстановитьДанныеТабличныхЧастейНаСервере",0,0,"","
&НаСервере
Процедура ВосстановитьДанныеТабличныхЧастейНаСервере()
	ОбъектНаСервере = РеквизитФормыВЗначение(""Объект"");
	
	ИменаТабличныхЧастей = Новый Массив;
	
	ИменаТабличныхЧастей.Добавить(""БазыДляОбновления"");
	ИменаТабличныхЧастей.Добавить(""СписокДопустимыхКОбнавлениюРелизов"");
	
	Для Каждого Имя Из ИменаТабличныхЧастей Цикл
		ЗагруженныеНастройки = ХранилищеОбщихНастроек.Загрузить(ЭтаФорма, Имя);
		Если ЗначениеЗаполнено(ЗагруженныеНастройки) Тогда
			ОбъектНаСервере[Имя].Загрузить(ЗагруженныеНастройки);
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ОбъектНаСервере, ""Объект"");
КонецПроцедуры
"}
},
{0,
{"ВосстановитьДанныеРеквизитовНаСервере",0,0,"","
&НаСервере
Процедура ВосстановитьДанныеРеквизитовНаСервере()
	ОбъектНаСервере = РеквизитФормыВЗначение(""Объект"");
	
	Реквизиты = Метаданные.Обработки.РаботаСВнешнимиИсточниками.Реквизиты;
	Для Каждого Реквизит Из Реквизиты Цикл
		ЗагруженныеНастройки = ХранилищеОбщихНастроек.Загрузить(ЭтаФорма, Реквизит.Имя);
		Если ЗначениеЗаполнено(ЗагруженныеНастройки) Тогда
			ОбъектНаСервере[Реквизит.Имя] = ЗагруженныеНастройки;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ОбъектНаСервере, ""Объект"");
КонецПроцедуры
"}
}
},
{1,
{"Информированием",1,0,"",""},
{0,
{"Маякнуть",0,0,"","
&НаКлиенте
Процедура Маякнуть(Строка)
	ТекДок = Новый ТекстовыйДокумент;
	
	ТекДок.Записать(""C:\"" + Строка + "".txt"");
КонецПроцедуры"}
}
},
{4,
{"Behavior",1,0,"",""},
{0,
{"Посмотреть значение",0,0,"","Ванесса.ПосмотретьЗначение(, Истина);
"}
},
{0,
{"Открыть новый сеанс тест-клиента или подключить уже существующий",0,0,"","ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""txt"");
Если Не Ванесса.ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующий(""/out"""""" + ИмяВременногоФайла) Тогда
	ВызватьИсключение ""Не смог подключить TestClient!"";
КонецЕсли;
"}
},
{0,
{"Получить состояние vanessa behavior",0,0,"","Ванесса.ПолучитьСостояниеVanessaBehavior();

//ТекущаяФича
//	Имя
//	ПолныйПуть
//ТекущийСценарий
//	Имя
//ТекущийШаг
//	ЗначенияПараметров
//	Имя"}
},
{2,
{"Контекст сохраняемый",1,0,"",""},
{0,
{"Тестовое приложение",0,0,"","КонтекстСохраняемый.ТестовоеПриложение"}
},
{0,
{"Тестируемое окно клиентского приложения",0,0,"","КонтекстСохраняемый.ГлавноеОкноТестируемого"}
}
}
},
{2,
{"Внешними обработками и отчетами",1,0,"",""},
{0,
{"Сведения о в нешней обработке",0,0,"","
// Функция заполняет структуру РегистрационныеДанные, которая имеет следующиме элементы (параметры):
//	• Наименование – краткое наименование обработки
//	• Версия - информация о версии обработки
//	• Безопасный режим – отвечает за то, должна ли обработка выполняться учитывая права пользователя.
//	• Вид – вид обработки или отчета. Возможные значения:
//		- ДополнительнаяОбработка
//		- ДополнительныйОтчет
//		- ЗаполнениеОбъекта
// 		- Отчет
//		- ПечатанаяФорма
//		- СозданиеСвязанныхОбъектов
//	• Команды – таблица значений, в которой перечисляются используемые команды. Колонки таблицы значений:
//		○ Идентификатор – любая строка (индефикатор команды)
//		○ Представление – описание команды
//		○ Модификатор -  строка (используется для дополнительных печатных форм)
//		○ ПоказыватьОповещение – окно оповещение будет появляться перед началом и после окончание выполнения (для команд клиентских и серверных без формы)
//		○ Использование – режим запуска обработки:
//			 ОткрытиеФормы – откроется форма обработки
//			 ВызовКлиентскогоМетода – вызов клиентского экспортного метода  форма
//			 ВызовСерверногоМетода – вызов экспортной  метода из модуля обработки
//	• Назначение
//		- ""Документ.*"" - все документы
Функция СведенияОВнешнейОбработке() Экспорт
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить(""Наименование"", ""<?""Наименование"">"");
	РегистрационныеДанные.Вставить(""БезопасныйРежим"", <?""БезопасныйРежим"", ВыборВарианта, ""Ложь"", ""Ложь"", ""Истина"", ""Истина"">);
	РегистрационныеДанные.Вставить(""Версия"", ""<?""Версия"", ДатаВремя, ""ДФ='dd.MM.yyyy - HH:mm'"">"");

	РегистрационныеДанные.Вставить(""Вид"", ""<?""Вид"", ВыборВарианта, ""ДополнительнаяОбработка"", ""ДополнительнаяОбработка"", ""ДополнительныйОтчет"", ""ДополнительныйОтчет"", ""ЗаполнениеОбъекта"", ""ЗаполнениеОбъекта"", ""Отчет"", ""Отчет"", ""ПечатнаяФорма"", ""ПечатнаяФорма"", ""СозданиеСвязанныхОбъектов"", ""СозданиеСвязанныхОбъектов"">"");
	
	РегистрационныеДанные.Вставить(""Информация"", ""<?""Информация"">"");
	
	#Область Команды
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить(""Идентификатор"");
	Команды.Колонки.Добавить(""Представление"");
	Команды.Колонки.Добавить(""Модификатор"");
	Команды.Колонки.Добавить(""ПоказыватьОповещение"");
	Команды.Колонки.Добавить(""Использование"");
	
	Команда = Команды.Добавить();
	Команда.Идентификатор = ""<?""ИдентификаторКоманды"">"";
	Команда.Представление = ""<?""ПредставлениеКоманды"">"";
	Команда.ПоказыватьОповещение = <?""ПоказыватьОповещениеКоманды"", ВыборВарианта, ""Ложь"", ""Ложь"", ""Истина"", ""Истина"">;
	Команда.Использование = ""<?""ИспользованиеКоманды"", ВыборВарианта, ""ОткрытиеФормы"", ""ОткрытиеФормы"", ""ВызовКлиентскогоМетода"", ""ВызовКлиентскогоМетода"", ""ВызовСерверногоМетода"", ""ВызовСерверногоМетода"">"";
	
	РегистрационныеДанные.Вставить(""Команды"", Команды);
	#КонецОбласти
	
	#Область Назначение
	Назначение = Новый Массив;
	Назначение.Добавить(""Документ.<?""Назначение"", Документ>""); 
	
	РегистрационныеДанные.Вставить(""Назначение"", Назначение);
	#КонецОбласти	
	
	Возврат РегистрационныеДанные;
КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения) Экспорт
	Если ИдентификаторКоманды = """" Тогда

	КонецЕсли;	
КонецПроцедуры	

Процедура Печать(ОбъектыНазначения, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	КоллекцияПечатныхФорм[0].ТабличныйДокумент = ???;
КонецПроцедуры
"}
},
{0,
{"Открыть внешнюю обработку",0,0,"","
&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	НачальноеИмяФайла	= ПолучитьПутьКОтчету();
	Если ПустаяСтрока(НачальноеИмяФайла) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ""Не указан путь к отчету, проверьте значение константы."";
		Сообщение.Сообщить();	
		
		Возврат;
	КонецЕсли;

	АдресХранилища = """";

	НачатьПомещениеФайла(Новый ОписаниеОповещения(""НачатьПомещениеФайлаЗавершение"", ЭтотОбъект), АдресХранилища, НачальноеИмяФайла, Ложь); 
КонецПроцедуры

&НаСервере
Функция ПолучитьПутьКОтчету() 
	Возврат Константы.ПутьКОтчету.Получить();
КонецФункции

&НаКлиенте
Процедура НачатьПомещениеФайлаЗавершение(Результат, АдресХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	Если Результат Тогда
		ИмяВнешнегоОтчета = ПодключитьВнешнююОбработкуОтчетНаСервере(АдресХранилища);

		ФормаОбработки = ПолучитьФорму(""ВнешнийОтчет."" + ИмяВнешнегоОтчета + "".Форма.ФормаОтчета"");
		
		ФормаОбработки.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПодключитьВнешнююОбработкуОтчетНаСервере(АдресХранилища)
	Возврат ВнешниеОтчеты.Подключить(АдресХранилища,, Ложь);
КонецФункции
"}
}
}
}
}
}
}